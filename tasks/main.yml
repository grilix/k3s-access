- name: El usuario tiene una clave privada
  openssl_privatekey:
    path: "{{ k3s_cluster_local_path }}/{{ k3s_client_name }}.pem"
    size: "4096"
    type: "RSA"
  register: generate_private_key
  delegate_to: localhost

- name: Comprobar si existe el CA del cluster
  stat:
    path: "{{ k3s_cluster_local_path }}/k8s-ca.crt"
    get_checksum: false
    get_mime: false
    get_attributes: false
  register: cluster_ca
  delegate_to: localhost

- name: Borrar certificado inválido del usuario
  file:
    path: "{{ k3s_cluster_local_path }}/{{ k3s_client_name }}.crt"
    state: absent
  # El certificado depende de la clave privada y el ca del cluster,
  # por lo tanto si una de ellas cambia, será inválido.
  when: generate_private_key.changed or (not cluster_ca.stat.exists)
  delegate_to: localhost

- name: Comprobar si el usuario tiene un certificado
  stat:
    path: "{{ k3s_cluster_local_path }}/{{ k3s_client_name }}.crt"
    get_checksum: false
    get_mime: false
    get_attributes: false
  register: client_certificate
  delegate_to: localhost

- name: Generar petición de firma
  community.crypto.openssl_csr_pipe:
    privatekey_path: "{{ k3s_cluster_local_path }}/{{ k3s_client_name }}.pem"
    common_name: "{{ k3s_client_name }}-{{ k3s_cluster_name }}"
    organization_name: "devops" # TODO: ?
  when: not client_certificate.stat.exists
  register: generate_csr
  delegate_to: localhost

- name: Paquetes de sistema instalados
  become: true
  apt:
    name:
      - python3-pip
    state: present

- name: Paquetes pip instalados
  pip:
    name:
      - openshift
    state: present
  when: not client_certificate.stat.exists

- name: Registrar petición de firma
  community.kubernetes.k8s:
    state: present
    wait: true
    wait_condition:
      reason: "status.conditions[*].type=(Pending|Approved|Issued)"
    definition:
      apiVersion: certificates.k8s.io/v1
      kind: CertificateSigningRequest
      metadata:
        name: "{{ k3s_client_name }}-k8s-access"
      spec:
        groups:
          - system:authenticated
          - system:admin
        request: "{{ generate_csr.csr | b64encode }}"
        signerName: kubernetes.io/kube-apiserver-client
        usages:
          - client auth
  when: not client_certificate.stat.exists

- name: Petición aprobada
  become: true
  ansible.builtin.command:
    argv:
      - kubectl
      - certificate
      - approve
      - "{{ k3s_client_name }}-k8s-access"
  register: approve_signature
  when: not client_certificate.stat.exists

- name: Certificado emitido
  when: not client_certificate.stat.exists
  register: certificate_signing_requests
  retries: 3
  delay: 2
  until: |
    certificate_signing_requests.resources |
    map(attribute='status.conditions') | flatten |
    selectattr('type', 'equalto', 'Approved') | list | count == 1
  community.kubernetes.k8s_info:
    api_version: certificates.k8s.io/v1
    kind: CertificateSigningRequest
    name: "{{ k3s_client_name }}-k8s-access"

- name: Certificado guardado
  when: not client_certificate.stat.exists
  vars:
    csr: "{{ certificate_signing_requests.resources[0] }}"
  template:
    src: templates/certificate.crt.j2
    dest: "{{ k3s_cluster_local_path }}/{{ k3s_client_name }}.crt"
  delegate_to: localhost

- name: Permisos otorgados al usuario
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: "{{ k3s_client_name }}-admin"
      subjects:
        - kind: User
          name: "{{ k3s_client_name }}-{{ k3s_cluster_name }}"
          apiGroup: rbac.authorization.k8s.io
      roleRef:
        kind: ClusterRole
        name: cluster-admin
        apiGroup: rbac.authorization.k8s.io

- name: Obtener certificado del cluster
  become: true
  when: not cluster_ca.stat.exists
  shell: |
    kubectl config view \
    -o jsonpath='{.clusters[0].cluster.certificate-authority-data}' --raw | \
    base64 --decode -
  register: cluster_ca_export

- name: Certificado del cluster guardado
  template:
    src: stdout.j2
    dest: "{{ k3s_cluster_local_path }}/k8s-ca.crt"
  vars:
    stdout: "{{ cluster_ca_export.stdout }}"
  when: cluster_ca_export.changed
  delegate_to: localhost

# FIXME: Esto podría ser mucho más mejor. Creo.
- name: Configurar acceso al cluster
  shell: |
    kubectl config set-cluster "{{ k3s_cluster_name }}" \
      --embed-certs=true \
      --server="{{ k3s_server_url }}" \
      --certificate-authority="{{ k3s_cluster_local_path }}/k8s-ca.crt"

    kubectl config set-credentials "{{ k3s_client_name }}-{{ k3s_cluster_name }}" \
      --embed-certs \
      --client-certificate="{{ k3s_cluster_local_path }}/{{ k3s_client_name }}.crt" \
      --client-key="{{ k3s_cluster_local_path }}/{{ k3s_client_name }}.pem"

    kubectl config set-context "{{ k3s_client_name }}-{{ k3s_cluster_name }}" \
      --cluster="{{ k3s_cluster_name }}" \
      --user="{{ k3s_client_name }}-{{ k3s_cluster_name }}"

    kubectl config use-context "{{ k3s_client_name }}-{{ k3s_cluster_name }}"
  delegate_to: localhost
